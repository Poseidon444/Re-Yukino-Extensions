const BASE_URL = 'https://fanfox.net';

final defaultHeaders = {
    'User-Agent': Http.defaultUserAgent,
    'Referer': BASE_URL,
    'Cookie': 'isAdult=1;',
}

fun searchURL(terms) {
    return Http.ensureURL('${BASE_URL}/search?title=${terms}');
}

fun defaultLocale() {
    return "en";
}

fun search(terms, locale) {
    return Promise.resolve(
        () => Http.fetch(
            method: 'get',
            url: searchURL(terms),
            headers: defaultHeaders
        ),
        onDone: fun (resp) {
            final document = HtmlElement.parse(resp.body);

            return Collection.mapList(document.querySelectorAll('.line-list li'), fun (i, x) {
                final link = x.querySelector('.manga-list-4-item-title a');
                final url = link.attributes['href'];
                final image = x.querySelector('img').attributes['src'];

                return SearchInfo(
                    title: link.text.trim(),
                    url: Http.ensureURL('${BASE_URL}${url}'),
                    thumbnail: ImageDescriber(
                        url: Http.ensureURL(image),
                        headers: defaultHeaders,
                    ),
                    locale: locale,
                );
            });
        }
    );
}

fun getInfo(url, locale) {
    return Promise.resolve(
        () => Http.fetch(
            method: 'get',
            url: Http.ensureURL(url),
            headers: defaultHeaders
        ),
        onDone: fun (resp) {
            final document = HtmlElement.parse(resp.body);
            
            final chapters = Collection.filterList(
                Collection.mapList(
                    document.querySelectorAll('#chapterlist li a'),
                    fun (i, x) {
                        final title = x.querySelector('.title3').text;
                        final shortTitle = Regex('-(.*)').firstMatch(title)?.group(1);
                        final route = x.attributes['href'];
                        final vol = Regex('Vol.(\\d+)').firstMatch(title)?.group(1);
                        final chap = Regex('Ch.([\\d.]+)').firstMatch(title)?.group(1);

                        if (chap != null) {
                            return ChapterInfo(
                                title: shortTitle ?? title,
                                url: Http.ensureURL('${BASE_URL}${route}'),
                                chapter: chap,
                                volume: vol,
                                locale: locale,
                            );
                        }

                        return null;
                    }
                ),
                (i, x) => x != null,
            );

            return MangaInfo(
                title: document.querySelector('.detail-info-right-title-font').text,
                url: Http.ensureURL(url),
                thumbnail: ImageDescriber(
                    url: Http.ensureURL(document.querySelector('img.detail-info-cover-img').attributes['src']),
                    headers: defaultHeaders
                ),
                chapters: chapters,
                locale: locale,
                availableLocales: [
                    locale
                ]
            );
        }
    );
}

fun replaceWithMobileURL(url) {
    return Http.ensureURL(Regex('https?:\\/\\/fanfox').replaceFirst(url, 'https://m.fanfox'));
}

fun getChapter(chapter) {
    final url = replaceWithMobileURL(chapter.url);

    return Promise.resolve(
        () => Http.fetch(
            method: 'get',
            url: url,
            headers: defaultHeaders
        ),
        onDone: fun (resp) {
            return Collection.mapList(
                HtmlElement.parse(resp.body).querySelector('select.mangaread-page').querySelectorAll('option'),
                fun (i, x) {
                    return PageInfo(
                        url: Http.ensureURL(x.attributes['value']),
                        locale: chapter.locale
                    );
                }
            );
        }
    );
}

fun getPage(page) {
    final url = replaceWithMobileURL(page.url);

    return Promise.resolve(
        () => Http.fetch(
            method: 'get',
            url: url,
            headers: defaultHeaders
        ),
        onDone: fun (resp) {
            final img = Regex('<img src="(.*?)".*id="image".*>').firstMatch(resp.body)?.group(1);
            if (img == null) return Flaw.throwFlaw('Failed to parse image URL');

            return ImageDescriber(
                url: Http.ensureURL(img),
                headers: defaultHeaders
            );
        }
    );
}