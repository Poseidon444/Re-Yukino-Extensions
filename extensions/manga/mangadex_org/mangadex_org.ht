final BASE_URL = 'https://mangadex.org';
final BASE_API_URL = 'https://api.mangadex.org';
final BASE_UPLOADS_URL = 'https://uploads.mangadex.org';

final defaultHeaders = {
    'Origin': BASE_URL,
    'Referer': BASE_URL,
};

fun searchApiURL(terms) {
    return Http.ensureURL('${BASE_API_URL}/manga?title=${terms}');
}

fun mangaApiURL(id) {
    return Http.ensureURL('${BASE_API_URL}/manga/${id}');
}

fun mangaFeedApiURL(id, locale, limit, offset) {
    return Http.ensureURL('${BASE_API_URL}/manga/${id}/feed?limit=${limit}&offset=${offset}&order[chapter]=asc&translatedLanguage[]=${locale}');
}

fun mangaChapterOverviewURL(id, chapter, volume, limit) {
    return Http.ensureURL('${BASE_API_URL}/chapter?manga=${id}&chapter=${chapter}&volume=${volume}&limit=${limit}&order[chapter]=asc');
}

fun mangaServerApiURL(id) {
    return Http.ensureURL('${BASE_API_URL}/at-home/server/${id}');
}

fun chpaterApiURL(serverURL, quality, hash) {
    return Http.ensureURL('${serverURL}/${quality}/${hash}');
}

fun pageSourceURL(chapterApiURL, filename) {
    return Http.ensureURL('${chapterApiURL}/${filename}');
}

fun coverApiURL(coverID) {
    return Http.ensureURL('${BASE_API_URL}/cover/${coverID}');
}

fun coverURL(mangaID, coverFile) {
    return Http.ensureURL('${BASE_UPLOADS_URL}/covers/${mangaID}/${coverFile}');
}

fun extractIdFromURL(url) {
    return Regex('https?:\\/\\/api\\.mangadex\\.org\\/manga\\/([^\\/]+)').firstMatch(url).group(1);
}

fun getCoverImageURL(manga, cover, cb) {
    return Promise.resolve(
        () => Http.fetch(
            method: 'get',
            url: coverApiURL(cover),
            headers: defaultHeaders,
        ),
        onDone: fun (resp) {
            final parsed = Converter.jsonDecode(resp.body);

            return cb(
                ImageDescriber(
                    url: coverURL(manga, parsed['data']['attributes']['fileName']),
                    headers: defaultHeaders
                )
            );
        }
    );
}

final _allLanguagesCache = Languages.all;

fun getAvailableLanguages(manga, cb) {
    return Promise.resolve(
        () => Http.fetch(
            method: 'get',
            url: mangaChapterOverviewURL(manga, 1, 1, 100),
            headers: defaultHeaders,
        ),
        onDone: fun (resp) {
            final parsed = Converter.jsonDecode(resp.body);

            final langs = Collection.filterList(
                Collection.mapList(
                    parsed['data'],
                    fun (i, x) {
                        return Regex('\\w+').firstMatch(x['attributes']['translatedLanguage'])?.group(0);
                    }
                ),
                (i, x) => x != null && _allLanguagesCache.contains(x),
            );

            return cb(langs);
        }
    );
}

fun defaultLocale() {
    return "en";
}

fun search(terms, locale) {
    return Promise.resolve(
        () => Http.fetch(
            method: 'get',
            url: searchApiURL(terms),
            headers: defaultHeaders,
        ),
        onDone: fun (resp) {
            final data = Converter.jsonDecode(resp.body)['data'];

            return Promise.resolveAll(
                Collection.mapList(
                    data.sublist(0, data.length > 10 ? 10 : data.length),
                    fun (i, x) {
                        final coverArt = Collection.findList(x['relationships'], fun (i, x) {
                            return x['type'] == 'cover_art';
                        });

                        fun finish(cover) {
                            return SearchInfo(
                                title: x['attributes']['title'][defaultLocale()],
                                url: mangaApiURL(x['id']),
                                thumbnail: cover,
                                locale: locale,
                            );
                        }

                        return fun () {
                            return coverArt != null
                                ? getCoverImageURL(x['id'], coverArt['id'], finish)
                                : finish(null);
                        }
                    }
                ),
                onDone: (res) => res,
            );
        }
    );
}

final _chapterLimit = 500;

fun getInfo(url, locale) {
    final id = extractIdFromURL(url);
    final mangaURL = mangaApiURL(id);

    return Promise.resolve(
        () => Http.fetch(
            method: 'get',
            url: mangaURL,
            headers: defaultHeaders
        ),
        onDone: fun (resp) {
            final parsed = Converter.jsonDecode(resp.body);
            final coverArt = Collection.findList(parsed['data']['relationships'], fun (i, x) {
                return x['type'] == 'cover_art';
            });

            return getAvailableLanguages(id, fun (langs) {
                fun finish(cover) {
                    fun resolveChapters(info, offset) {
                        return Promise.resolve(
                            () => Http.fetch(
                                method: 'get',
                                url: mangaFeedApiURL(id, locale, _chapterLimit, offset),
                                headers: defaultHeaders
                            ),
                            onDone: fun (resp) {
                                var wasEmpty = true;

                                Collection.eachList(
                                    Converter.jsonDecode(resp.body)['data'],
                                    fun (i, x) {
                                        final id = x['id'];
                                        final title = x['attributes']['title'];

                                        info.chapters.add(
                                            ChapterInfo(
                                                title: (title?.isNotEmpty ?? false) ? title : null,
                                                url: 'id:${id}',
                                                chapter: x['attributes']['chapter'],
                                                volume: x['attributes']['volume'],
                                                locale: locale,
                                            ),
                                        );

                                        wasEmpty = false;
                                    }
                                );

                                return !wasEmpty
                                    ? resolveChapters(info, offset + _chapterLimit)
                                    : info;
                            }
                        );
                    }

                    final localeTitle = parsed['data']['attributes']['title'][locale];
                    final defaultLocaleTitle = parsed['data']['attributes']['title'][defaultLocale()];

                    return resolveChapters(
                        MangaInfo(
                            title: localeTitle ?? defaultLocaleTitle,
                            url: mangaURL,
                            thumbnail: cover,
                            chapters: [],
                            locale: locale,
                            availableLocales: langs
                        ),
                        0,
                    );
                }

                return coverArt != null
                    ? getCoverImageURL(parsed['data']['id'], coverArt['id'], finish)
                    : finish(null);
            });
        }
    );
}

fun getChapter(chapter) {
    final id = chapter.url.replaceFirst('id:', '');

    return Promise.resolve(
        () => Http.fetch(
            method: 'get',
            url: mangaServerApiURL(id),
            headers: defaultHeaders
        ),
        onDone: fun (resp) {
            final parsed = Converter.jsonDecode(resp.body);
            final chapterURL = chpaterApiURL(parsed['baseUrl'], 'data', parsed['chapter']['hash']);

            return Collection.mapList(
                parsed['chapter']['data'],
                fun (i, x) {
                    return PageInfo(
                        url: pageSourceURL(chapterURL, x),
                        locale: chapter.locale
                    );
                }
            );
        }
    );
}

fun getPage(page) {
    return ImageDescriber(
        url: page.url,
        headers: defaultHeaders
    );
}