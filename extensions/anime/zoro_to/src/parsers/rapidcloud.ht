import '../utils.ht';

class RapidCloud {
    static fun parseId(url) {
        return Regex('\\/embed-6\\/([^?]+)\\?z=').firstMatch(url).group(1);
    }

    static fun getSourcesApiURL(id) {
        return Http.ensureURL('https://rapid-cloud.ru/ajax/embed-6/getSources?id=${id}');
    }

    static fun parse(url) {
        final id = parseId(url);
        final apiURL = getSourcesApiURL(id);

        return Promise.resolve(
            () => Http.fetch(
                method: 'get',
                url: apiURL,
                headers: $.defaultHeaders,
            ),
            onDone: fun (resp) {
                final parsed = Converter.jsonDecode(resp.body);

                return Promise.resolveAll(
                    Collection.mapList(
                        parsed['sources'],
                        fun (i, x) {
                            final m3u8URL = x['file'];
                            final m3u8ParentURL = Regex('(.*)\\/[^\\/]+$').firstMatch(m3u8URL).group(1);

                            return () => Promise.resolve(
                                () => Http.fetch(
                                    method: 'get',
                                    url: m3u8URL,
                                    headers: $.defaultHeaders,
                                ),
                                onDone: fun (resp) {
                                    return Collection.mapList(
                                        Regex('#EXT-X-STREAM-INF:.*?,RESOLUTION=\\d+x(\\d+),.*?\\n([^\\n]+)').allMatches(resp.body),
                                        fun (i, x) {
                                            final resHeight = x.group(1);
                                            final route = x.group(2);

                                            return EpisodeSource(
                                                url: Http.ensureURL('${m3u8ParentURL}/${route}'),
                                                headers: $.defaultHeaders,
                                                quality: '${resHeight}p',
                                                locale: $.defaultLocale,
                                            );
                                        }
                                    );
                                },
                            );
                        }
                    ),
                    onDone: (res) => Collection.flattenList(res, 1),
                );
            },
        );
    }
}
