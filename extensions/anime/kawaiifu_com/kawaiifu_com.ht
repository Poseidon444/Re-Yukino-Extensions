// Doesn't work anymore due to hCaptcha

const baseURL = 'https://kawaiifu.com';

const defaultHeaders: Map<str> = {
    'User-Agent': httpUserAgent(),
    'Referer': baseURL,
}

var dom = null;

fun getDOM(trace: TaskTrace) {
    if (dom != null && !dom.disposed) {
        trace.add('Returning previous DOM');
        return dom;
    }

    trace.add('Creating new DOM');
    return resolveFuture(createDOM(), fun (err, res) {
        if (err != null) return throwError(err);
        dom = res;
        return dom;
    });
}

fun getSite(url: str, trace: TaskTrace) {
    trace.add('Preparing DOM');
    return resolveFuture(getDOM(trace), fun (err, tab) {
        if (err != null) return throwError(err, trace);

        trace.add('Opening URL: "${url}"');
        return resolveFuture(tab.open(url, 'domContentLoaded'), fun (err, mt) {
            if (err != null) return throwError(err, trace);

            trace.add('Trying to bypass cloudflare');
            return resolveFuture(tryBypassCloudflareCheck(tab), fun (err, bypassed) {
                if (err != null) return throwError(err, trace);
                if (!bypassed) return throwError('Failed to bypass cloudflare', trace);

                return tab;
            });
        });
    });
}

fun searchURL(terms: str) -> str {
    return ensureURL('${baseURL}/search-movie?keyword=${terms}');
}

fun defaultLocale() -> str {
    return "en";
}

fun search(terms: str, locale: str) {
    return resolveFuture(fetch({
        'method': 'get',
        'url': searchURL(terms),
        'headers': mergeMap(defaultHeaders, {
            'cookie': 'loop-view=thumb;'
        })
    }), fun (err, resp) {
        if (err != null) return throwError(err);

        const document: HtmlElement = parseHtml(resp['body']);

        return mapList(document.querySelectorAll('.today-update .item'), fun (i: num, x: HtmlElement) {
            const title: str = x.querySelectorAll('.info h4 a').last.text.trim();
            const url: str = x.querySelector('.thumb').attributes['href'].trim();
            const thumbnail: str = x.querySelector('img').attributes['src'].trim();

            return {
                'title': title,
                'url': ensureURL(url),
                'thumbnail': {
                    'url': ensureURL(thumbnail),
                    'headers': defaultHeaders,
                },
                'locale': locale,
            };
        });
    });
}

fun getInfo(url: str, locale: str) {
    const trace = TaskTrace();

    return resolveFuture(fetch({
        'method': 'get',
        'url': ensureURL(url),
        'headers': defaultHeaders
    }), fun (err, resp) {
        if (err != null) return throwError(err);

        const document: HtmlElement = parseHtml(resp['body']);

        const server: str = findList(document.querySelectorAll('.list-server'), fun (i: num, x: HtmlElement) {
            const style = x.attributes['style'];
            return style != null ? style.contains('display: none') == false : true;
        }).querySelector('a').attributes['href'].trim();

        return resolveFuture(getSite(ensureURL(server), trace), fun (err, tab) {
            if (err != null) return throwError(err, trace);

            return resolveFuture(tab.getHtml(), fun (err, sevRes) {
                const episodes: List = mapList(
                    findList(parseHtml(sevRes).querySelectorAll('.list-ep'), fun (i: num, x: HtmlElement) {
                        const style = x.attributes['style'];
                        return style != null ? style.contains('display: none') == false : true;
                    }).querySelectorAll('a'),
                    fun (i: num, x: HtmlElement) {
                        const url: str = x.attributes['href'].trim();
                        return {
                            'episode': x.text.replaceFirst('Ep', '').trim(),
                            'url': ensureURL(url),
                            'locale': locale
                        }
                    }
                );

                const title1 = document.querySelector('.desc h2.title');
                const title2 = document.querySelector('.desc .sub-title');

                return {
                    'title': title1 != null ? title1.text.trim() : title2.text.trim(),
                    'url': ensureURL(url),
                    'thumbnail': {
                        'url': ensureURL(document.querySelector('.row .thumb img').attributes['src'].trim()),
                        'headers': defaultHeaders,
                    },
                    'episodes': episodes,
                    'locale': locale,
                    'availableLocales': [
                        locale
                    ]
                };
            });
        });
    });
}

fun getSources(episode: Map) {
    return resolveFuture(fetch({
        'method': 'get',
        'url': episode['url'],
        'headers': defaultHeaders
    }), fun (err, resp) {
        if (err != null) return throwError(err);

        const document: HtmlElement = parseHtml(resp['body']);
        
        return mapList(document.querySelectorAll('.player source'), fun (i: num, x: HtmlElement) {
            return {
                'url': ensureURL(x.attributes['src']),
                'quality': x.attributes['data-quality'],
                'headers': defaultHeaders,
                'locale': episode['locale']
            };
        });
    });
}
