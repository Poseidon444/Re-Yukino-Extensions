class $ {
    static final baseURL = 'https://mangadex.org';
    static final baseApiURL = 'https://api.mangadex.org';
    static final baseUploadsURL = 'https://uploads.mangadex.org';

    static final defaultHeaders = {
        'Origin': baseURL,
        'Referer': baseURL,
    };

    static final defaultLocale = Locale.parse('en');

    static fun getSearchApiURL(terms) {
        return URL.ensureURL('${baseApiURL}/manga?title=${terms}');
    }

    static fun getMangaApiURL(id) {
        return URL.ensureURL('${baseApiURL}/manga/${id}');
    }

    static fun getMangaFeedApiURL(id, locale, limit, offset) {
        return URL.ensureURL('${baseApiURL}/manga/${id}/feed?limit=${limit}&offset=${offset}&order[chapter]=asc&translatedLanguage[]=${locale}');
    }

    static fun getMangaChapterOverviewURL(id, chapter, volume, limit) {
        return URL.ensureURL('${baseApiURL}/chapter?manga=${id}&chapter=${chapter}&volume=${volume}&limit=${limit}&order[chapter]=asc');
    }

    static fun getMangaServerApiURL(id) {
        return URL.ensureURL('${baseApiURL}/at-home/server/${id}');
    }

    static fun getChapterApiURL(serverURL, quality, hash) {
        return URL.ensureURL('${serverURL}/${quality}/${hash}');
    }

    static fun getPageSourceURL(chapterApiURL, filename) {
        return URL.ensureURL('${chapterApiURL}/${filename}');
    }

    static fun getCoverApiURL(coverID) {
        return URL.ensureURL('${baseApiURL}/cover/${coverID}');
    }

    static fun getCoverURL(mangaID, coverFile) {
        return URL.ensureURL('${baseUploadsURL}/covers/${mangaID}/${coverFile}');
    }

    static fun parseId(url) {
        return Regex('https?:\\/\\/api\\.mangadex\\.org\\/manga\\/([^\\/]+)').firstMatch(url).group(1);
    }

    static fun noop() {
        return null;
    }
}
