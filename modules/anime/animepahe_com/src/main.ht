import 'utils.ht';

final extractor = AnimeExtractor(
    defaultLocale: $.defaultLocale,
    search: fun (terms, locale) {
        return AsyncTask.resolve(
            () => Http.fetch(
                method: 'get',
                url: $.getSearchApiURL(terms),
                headers: $.defaultHeaders,
            ),
            onDone: fun (resp) {
                final parsed = Converter.jsonDecode(resp.body);

                return Collection.mapList(
                    parsed['data'],
                    fun (i, x) {
                        return SearchInfo(
                            title: x['title'],
                            url: $.getAnimeURL(x['session']),
                            thumbnail: ImageDescriber(
                                url: Http.ensureURL(x['poster']),
                                headers: $.defaultHeaders,
                            ),
                            locale: $.defaultLocale,
                        );
                    }
                );
            },
        );
    },
    getInfo: fun (_url, locale) {
        final url = Http.ensureURL(_url);
        final slug = $.parseSlug(url);
        
        return AsyncTask.resolve(
            () => Http.fetch(
                method: 'get',
                url: url,
                headers: $.defaultHeaders,
            ),
            onDone: fun (resp) {
                final id = Regex('\\/a\\/(\d+)').firstMatch(resp.body).group(1);
                final document = HtmlElement.parse(resp.body);

                return AsyncTask.resolve(
                    () => Http.fetch(
                        method: 'get',
                        url: $.getEpisodesApiURL(id),
                        headers: $.defaultHeaders,
                    ),
                    onDone: fun (resp) {
                        final eParsed = Converter.jsonDecode(resp.body);
                        final eStart = eParsed['from'];
                        final eTotal = eParsed['total'];

                        return AnimeInfo(
                            title: document
                                .querySelector('.anime-header .title-wrapper > h1')
                                .text
                                .trim(),
                            url: url,
                            thumbnail: ImageDescriber(
                                url: Http.ensureURL(
                                    document
                                        .querySelector('.anime-header .anime-poster img')
                                        .attributes['data-src']
                                        .trim()
                                ),
                                headers: $.defaultHeaders,
                            ),
                            episodes: Collection.mapList(
                                Collection.filledList(eTotal, null),
                                fun (i, x) {
                                    final eNum = eStart + i;

                                    return EpisodeInfo(
                                        episode: eNum.toString(),
                                        url: $.getCustomEpisodeURL(id, slug, eNum),
                                        locale: $.defaultLocale,
                                    );
                                }
                            ),
                            locale: $.defaultLocale,
                            availableLocales: [
                                $.defaultLocale,
                            ]
                        );
                    }
                );
            },
        );
    },
    getSources: fun (_url, locale) {
        final url = Http.ensureURL(_url);

        if ($.isPlayURL(url)) {
            final uParsed = $.parsePlayURL(url);

            return AsyncTask.resolve(
                () => Http.fetch(
                    method: 'get',
                    url: url,
                    headers: $.defaultHeaders,
                ),
                onDone: fun (resp) {
                    final id = Regex('getUrls\\((\\d+)').firstMatch(resp.body).group(1);

                    return _getSources(id, uParsed['episode-slug']);
                },
            );
        }

        final uParsed = $.parseCustomEpisodeURL(url);
        final _eNum = int.parse(uParsed['episode']);

        return AsyncTask.resolve(
            () => Http.fetch(
                method: 'get',
                url: $.getEpisodesApiURLFromNumber(uParsed['anime-id'], _eNum),
                headers: $.defaultHeaders,
            ),
            onDone: fun (resp) {
                final parsed = Converter.jsonDecode(resp.body);

                final data = Collection.findList(
                    parsed['data'],
                    (i, x) => x['episode'] == _eNum,
                );

                return _getSources(data['anime_id'], data['session']);
            }
        );
    },
);

fun _getSources(id, slug) {
    return AsyncTask.resolve(
        () => Http.fetch(
            method: 'get',
            url: $.getSourcesApiURL(id, slug),
            headers: $.defaultHeaders,
        ),
        onDone: fun (resp) {
            final parsed = Converter.jsonDecode(resp.body);
            
            return AsyncTask.resolveAll(
                Collection.mapList(
                    parsed['data'],
                    fun (i, x) {
                        final quality = x.keys.first;
                        final y = x[quality];
                        
                        final embed = Http.ensureURL(y['kwik']);
                        final baseURL = Http.getDomainFromURL(embed);

                        return () => AsyncTask.resolve(
                            () => Http.fetch(
                                method: 'get',
                                url: embed,
                                headers: $.defaultHeaders,
                            ),
                            onDone: fun (resp) {
                                final m = Regex('Plyr\\|querySelector\\|document\\|([^\'"]+)')
                                    .firstMatch(resp.body)
                                    .group(1)
                                    .split('|');

                                return EpisodeSource(
                                    url: '${m[10]}://${m[9]}-${m[8]}.${m[7]}.${m[6]}.${m[5]}/${m[4]}/${m[3]}/${m[2]}/${m[1]}.${m[0]}',
                                    headers: Collection.mergeMap($.defaultHeaders, {
                                        'Referer': baseURL,
                                    }),
                                    quality: quality,
                                    locale: $.defaultLocale,
                                );
                            },
                        );
                    }
                ),
                onDone: (res) => res,
            );
        },
    );
}
