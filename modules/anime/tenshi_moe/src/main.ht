import 'utils.ht';
import '../../../shared/utils.ht';

final fetcher = $DDOSGuardFetcher();

fun _headers(headers) {
    return fetcher.attachBypassHeaders(headers);
}

final extractor = AnimeExtractor(
    defaultLocale: $.defaultLocale,
    search: fun (terms, locale) {
        final url = $.getSearchURL(terms);

        return AsyncTask.resolve(
            () => fetcher.getBody(
                method: 'get',
                url: url,
                headers: Collection.mergeMap($.defaultHeaders, {
                    'Cookie': 'loop-view=thumb;',
                }),
            ),
            onDone: fun (html) {
                final document = HtmlElement.parse(html);

                return Collection.mapList(
                    document.querySelectorAll('.anime-loop li'),
                    fun (i, x) {
                        final link = x.querySelector('a');
                        final title = link.attributes['title'].trim();
                        final url = link.attributes['href'].trim();
                        final thumbnail = link.querySelector('.image').attributes['src'].trim();

                        return SearchInfo(
                            title: title,
                            url: Http.ensureURL(url),
                            thumbnail: ImageDescriber(
                                url: Http.ensureURL(thumbnail),
                                headers: _headers($.defaultHeaders),
                            ),
                            locale: $.defaultLocale,
                        );
                    }
                );
            }
        );
    },
    getInfo: fun (url, locale) {
        final url = Http.ensureURL(url);

        return AsyncTask.resolve(
            () => fetcher.getBody(
                method: 'get',
                url: url,
                headers: $.defaultHeaders,
            ),
            onDone: fun (html) {
                final document = HtmlElement.parse(html);

                final estimated = document.querySelector('.entry-episodes .badge.badge-secondary.align-top').text.trim();
                final trimmedURL = url.endsWith('/') ? url.substring(0, url.length - 1) : url;

                final episodes = Collection.mapList(
                    Collection.rangeList(0, int.parse(estimated)),
                    fun (i: num, x: num) {
                        final epNum = '${x + 1}';
                        
                        return EpisodeInfo(
                            episode: epNum,
                            url: Http.ensureURL('${trimmedURL}/${epNum}'),
                            locale: $.defaultLocale,
                        );
                    }
                );

                return AnimeInfo(
                    title: document.querySelector('.entry-header').text.trim(),
                    url: Http.ensureURL(url),
                    thumbnail: ImageDescriber(
                        url: Http.ensureURL(document.querySelector('img.cover-image').attributes['src'].trim()),
                        headers: _headers($.defaultHeaders),
                    ),
                    episodes: episodes,
                    locale: $.defaultLocale,
                    availableLocales: [
                        $.defaultLocale,
                    ]
                );
            }
        );
    },
    getSources: fun (_url, locale) {
        final url = Http.ensureURL(_url);

        return AsyncTask.resolve(
            () => fetcher.getBody(
                method: 'get',
                url: url,
                headers: $.defaultHeaders,
            ),
            onDone: fun (html) {
                final iframeURL = Regex('<iframe src="([^"]+)"').firstMatch(html).group(1);
                final iframeHeaders = Collection.mergeMap($.defaultHeaders, {
                    'Referer': url,
                });
                final rHeaders = _headers(iframeHeaders);

                return AsyncTask.resolve(
                    () => fetcher.getBody(
                        method: 'get',
                        url: iframeURL,
                        headers: iframeHeaders,
                    ),
                    onDone: fun (iframeHtml) {
                        final sources = Regex('sources:[\\s]+\\[([^\\]]+)')
                            .firstMatch(iframeHtml)
                            .group(1);

                        return Collection.mapList(
                            Regex('src:[\\s]+?["\']([^\'"]+)[\\S\\s]+?size:[\\s]+?(\\d+)')
                                .allMatches(sources),
                            fun (i, x) {
                                return EpisodeSource(
                                    url: Http.ensureURL(x.group(1)),
                                    quality: x.group(2),
                                    headers: rHeaders,
                                    locale: $.defaultLocale,
                                );
                            }
                        );
                    }
                );
            }
        );
    },
);
